trigger:
- master

variables:
  version: ''

stages:
- stage: 'Build'
  variables:
    buildConfiguration: 'Release'

  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'

    workspace:
      clean: all

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk'
      inputs:
        packageType: sdk
        version: 3.1.x
        installationPath: $(Agent.ToolsDirectory)/dotnet
    
    - task: DotNetCoreCLI@2
      displayName: "NuGet Restore"
      inputs:
        command: restore
        projects: 'src/**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: "Build Solution"
      inputs:
        command: build
        projects: 'src/**/*.csproj'
        arguments: '--configuration $(buildConfiguration)'
    
    - task: DotNetCoreCLI@2
      displayName: 'Create NuGet Package - Release Version'
      inputs:
        command: pack
        projects: 'src/**/*.csproj'
        packDirectory: '$(Build.ArtifactStagingDirectory)/packages/releases'
        arguments: '--configuration $(buildConfiguration)'
        nobuild: true
    
    - task: DotNetCoreCLI@2
      displayName: 'Create NuGet Package - Prerelease Version'
      inputs:
        command: pack
        projects: 'src/**/*.csproj'
        buildProperties: 'VersionSuffix="$(Build.BuildNumber)"'
        packDirectory: '$(Build.ArtifactStagingDirectory)/packages/prereleases'
        arguments: '--configuration $(buildConfiguration)'
        nobuild: true

    - publish: '$(Build.ArtifactStagingDirectory)/packages'
      artifact: 'packages'
      
    - task: NuGetCommand@2
      inputs:
        command: 'push'
        packagesToPush: '$(Build.ArtifactStagingDirectory)/packages/prereleases/*.nupkg'
        nuGetFeedType: 'internal'
        publishVstsFeed: '244fc4dd-c57d-4d7a-b51c-53da68b0aeeb/ab707810-8716-4b0e-90e0-aefe6f54a83d'

- stage: 'Test'
  displayName: 'Run Tests'
  dependsOn: 'Build'
  condition: succeeded()
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      version: ''
    steps:
    - download: current
      artifact: 'packages'
    - script: |
        echo "##vso[task.setvariable variable=version;isOutput=true]`ls $(Pipeline.Workspace)/packages/prereleases | cut -d . -f 2-5`"
    - script: |
        echo "Version: $(version)"
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk'
      inputs:
        packageType: sdk
        version: 3.1.x
        installationPath: $(Agent.ToolsDirectory)/dotnet
    - task: DotNetCoreCLI@2
      displayName: 'Remove package reference'
      inputs:
        command: 'custom'
        projects: 'test/**/*.csproj'
        custom: 'remove'
        arguments: 'reference BinaryEncoding'
    - task: DotNetCoreCLI@2
      displayName: "Add package reference"
      inputs:
        command: 'custom'
        projects: 'test/**/*.csproj'
        custom: 'add'
        arguments: 'package BinaryEncoding --version $(version) --source https://pkgs.dev.azure.com/tabrath/BinaryEncoding/_packaging/binary-encoding/nuget/v3/index.json'

    - task: DotNetCoreCLI@2
      inputs:
        command: test
        projects: 'test/**/*.csproj'
        arguments: -c $(buildConfiguration) --settings $(System.DefaultWorkingDirectory)/CodeCoverage.runsettings --collect:"XPlat Code Coverage" -- RunConfiguration.DisableAppDomain=true
      displayName: Run Tests

    - task: DotNetCoreCLI@2
      inputs:
        command: custom
        custom: tool
        arguments: install --tool-path . dotnet-reportgenerator-globaltool
      displayName: Install ReportGenerator tool
  
    - script: reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"
      displayName: Create reports
  
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage'
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: $(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml  
        
#- stage: 'PublishPrereleaseNuGetPackage'
#  displayName: 'Publish Prerelease NuGet Package'
#  dependsOn: 'Build'
#  condition: succeeded()
#  jobs:
#  - job:
#    pool:
#      vmImage: 'ubuntu-latest'
#
#    steps:
#    - checkout: none
#
#    - download: current
#      artifact: 'packages'
#
#    - task: NuGetCommand@2
#      displayName: 'Push NuGet Package'
#      inputs:
#        command: 'push'
#        packagesToPush: '$(Pipeline.Workspace)/packages/prereleases/*.nupkg'
#        nuGetFeedType: 'internal'
#        publishVstsFeed: 'Test'
#
#- stage: 'PublishReleaseNuGetPackage'
#  displayName: 'Publish Release NuGet Package'
#  dependsOn: 'PublishPrereleaseNuGetPackage'
#  condition: succeeded()
#  jobs:
#  - deployment:
#    pool:
#      vmImage: 'ubuntu-latest'
#    environment: 'nuget-org'
#    strategy:
#     runOnce:
#       deploy:
#         steps:
#         - task: NuGetCommand@2
#           displayName: 'Push NuGet Package'
#           inputs:
#             command: 'push'
#             packagesToPush: '$(Pipeline.Workspace)/packages/releases/*.nupkg'
#             nuGetFeedType: 'external'
#             publishFeedCredentials: 'NuGet'
