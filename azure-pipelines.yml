trigger:
- master

stages:
- stage: 'Build'
  variables:
    buildConfiguration: 'Release'

  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'

    workspace:
      clean: all

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk'
      inputs:
        packageType: sdk
        version: 3.1.x
        installationPath: $(Agent.ToolsDirectory)/dotnet
    
    - task: DotNetCoreCLI@2
      displayName: "NuGet Restore"
      inputs:
        command: restore
        projects: 'src/**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: "Build Solution"
      inputs:
        command: build
        projects: 'src/**/*.csproj'
        arguments: '--configuration $(buildConfiguration)'
    
    - task: DotNetCoreCLI@2
      displayName: 'Create NuGet Package - Release Version'
      inputs:
        command: pack
        projects: 'src/**/*.csproj'
        packDirectory: '$(Build.ArtifactStagingDirectory)/packages/releases'
        arguments: '--configuration $(buildConfiguration)'
        nobuild: true
    
    - task: DotNetCoreCLI@2
      displayName: 'Create NuGet Package - Prerelease Version'
      inputs:
        command: pack
        projects: 'src/**/*.csproj'
        buildProperties: 'VersionSuffix="$(Build.BuildNumber)"'
        packDirectory: '$(Build.ArtifactStagingDirectory)/packages/prereleases'
        arguments: '--configuration $(buildConfiguration)'

	- script: |
		temp=$(ls "$(Build.ArtifactStagingDirectory)/packages/prereleases")
		echo "##vso[task.setvariable variable=version;isOutput=true]$temp | cut -d . -f 2-5"
        
    - publish: '$(Build.ArtifactStagingDirectory)/packages'
      artifact: 'packages'
        
#- stage: 'PublishPrereleaseNuGetPackage'
#  displayName: 'Publish Prerelease NuGet Package'
#  dependsOn: 'Build'
#  condition: succeeded()
#  jobs:
#  - job:
#    pool:
#      vmImage: 'ubuntu-latest'
#
#    steps:
#    - checkout: none
#
#    - download: current
#      artifact: 'packages'
#
#    - task: NuGetCommand@2
#      displayName: 'Push NuGet Package'
#      inputs:
#        command: 'push'
#        packagesToPush: '$(Pipeline.Workspace)/packages/prereleases/*.nupkg'
#        nuGetFeedType: 'internal'
#        publishVstsFeed: 'Test'
#
#- stage: 'PublishReleaseNuGetPackage'
#  displayName: 'Publish Release NuGet Package'
#  dependsOn: 'PublishPrereleaseNuGetPackage'
#  condition: succeeded()
#  jobs:
#  - deployment:
#    pool:
#      vmImage: 'ubuntu-latest'
#    environment: 'nuget-org'
#    strategy:
#     runOnce:
#       deploy:
#         steps:
#         - task: NuGetCommand@2
#           displayName: 'Push NuGet Package'
#           inputs:
#             command: 'push'
#             packagesToPush: '$(Pipeline.Workspace)/packages/releases/*.nupkg'
#             nuGetFeedType: 'external'
#             publishFeedCredentials: 'NuGet'
